import 'package:bid/models/address_model.dart';
import 'package:bid/models/order_item_model.dart';
import 'package:bid/models/order_model.dart';
import 'package:bid/models/payment_method_model.dart';
import 'package:bid/respositories/order_repository.dart';
import 'package:bid/state/cart/cart_state.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'checkout_state.dart';

class CheckoutNotifier extends StateNotifier<CheckoutState> {
  final OrderRepository _orderRepository;

  CheckoutNotifier({required OrderRepository orderRepository})
      : _orderRepository = orderRepository,
        super(CheckoutState.initial());

  void initCheckout(List<CartItem> items, {bool isGuestCheckout = false}) {
    state = state.copyWith(
      items: items,
      currentStep: CheckoutStep.cart,
      isGuestCheckout: isGuestCheckout,
      clearError: true,
    );
  }

  void setShippingAddress(Address address) {
    state = state.copyWith(
      shippingAddress: address,
      currentStep: CheckoutStep.shipping,
    );
  }

  void setPaymentMethod(PaymentMethod paymentMethod) {
    state = state.copyWith(
      paymentMethod: paymentMethod,
      currentStep: CheckoutStep.payment,
    );
  }

  void goToStep(CheckoutStep step) {
    state = state.copyWith(currentStep: step);
  }

  Future<bool> placeOrder(String userId) async {
    if (state.shippingAddress == null) {
      state = state.copyWith(error: 'Shipping address is required');
      return false;
    }

    if (state.paymentMethod == null && !state.isGuestCheckout) {
      state = state.copyWith(error: 'Payment method is required');
      return false;
    }

    state = state.copyWith(isLoading: true, clearError: true);

    try {
      // Create order items from cart items
      final orderItems = state.items.map((item) => OrderItem(
        itemId: item.id,
        productId: item.productId,
        name: item.name,
        price: item.price,
        quantity: item.quantity,
        imageUrl: item.imageUrl,
      )).toList();

      // Create order
      final order = Order(
        orderId: '',  // Will be generated by the database
        userId: userId,
        items: orderItems,
        orderDate: DateTime.now(),
        status: 'PENDING',
        taxAmount: state.tax,
        shippingAmount: state.shipping,
        discountAmount: 0.0,  // Default to 0
        totalAmount: state.total,
      );

      // Submit order to repository
      final orderId = await _orderRepository.createOrder(order);

      if (orderId != null) {
        state = state.copyWith(
          orderId: orderId,
          currentStep: CheckoutStep.confirmation,
          isLoading: false,
        );
        return true;
      } else {
        state = state.copyWith(
          error: 'Failed to create order',
          isLoading: false,
        );
        return false;
      }
    } catch (e) {
      state = state.copyWith(
        error: 'Error placing order: $e',
        isLoading: false,
      );
      return false;
    }
  }

  void reset() {
    state = CheckoutState.initial();
  }
}
