import 'package:bid/models/address_model.dart';
import 'package:bid/models/order_item_model.dart';
import 'package:bid/models/order_model.dart';
import 'package:bid/models/payment_method_model.dart';
import 'package:bid/respositories/order_repository.dart';
import 'package:bid/services/guest_order_service.dart';
import 'package:bid/state/cart/cart_state.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../base/base_notifier.dart';
import 'checkout_state.dart';

class CheckoutNotifier extends BaseNotifier<CheckoutState> {
  final OrderRepository _orderRepository;
  final GuestOrderService _guestOrderService;

  CheckoutNotifier({
    required OrderRepository orderRepository,
    required GuestOrderService guestOrderService,
  }) : _orderRepository = orderRepository,
        _guestOrderService = guestOrderService,
        super(CheckoutState.initial());

  void initCheckout(List<CartItem> items, {bool isGuestCheckout = false, String? guestEmail}) {
    state = state.copyWith(
      items: items,
      currentStep: CheckoutStep.cart,
      isGuestCheckout: isGuestCheckout,
      guestEmail: guestEmail,
      clearError: true,
    );
  }

  void setShippingAddress(Address address) {
    state = state.copyWith(
      shippingAddress: address,
      currentStep: CheckoutStep.shipping,
    );
  }

  void setPaymentMethod(PaymentMethod paymentMethod) {
    state = state.copyWith(
      paymentMethod: paymentMethod,
      currentStep: CheckoutStep.payment,
    );
  }

  void setGuestEmail(String email) {
    state = state.copyWith(
      guestEmail: email,
    );
  }

  void goToStep(CheckoutStep step) {
    state = state.copyWith(currentStep: step);
  }

  Future<bool> placeOrder(String userId) async {
    if (state.shippingAddress == null) {
      state = state.copyWith(error: 'Shipping address is required');
      return false;
    }

    if (state.paymentMethod == null && !state.isGuestCheckout) {
      state = state.copyWith(error: 'Payment method is required');
      return false;
    }

    startLoading();

    try {
      if (state.isGuestCheckout) {
        // Handle guest checkout
        final result = await _guestOrderService.saveGuestOrder(
          items: state.items,
          shippingAddress: state.shippingAddress!,
          subtotal: state.subtotal,
          tax: state.tax,
          shipping: state.shipping,
          total: state.total,
          paymentMethod: state.paymentMethod?.id ?? 'card',
          paymentIntentId: null, // Add payment intent ID if you have it
        );

        if (result['success']) {
          state = state.copyWith(
            guestOrderId: result['order_id'],
            orderId: result['order_id'],
            currentStep: CheckoutStep.confirmation,
            isOrderSavedLocally: true,
          );
          endLoading();
          return true;
        } else {
          handleError('creating guest order', result['message'] ?? 'Failed to create guest order');
          return false;
        }
      } else {
        // Create order items from cart items
        final orderItems = state.items.map((item) => OrderItem(
          itemId: item.id,
          productId: item.productId,
          name: item.name,
          price: item.price,
          quantity: item.quantity,
          imageUrl: item.imageUrl,
        )).toList();

        // Create order
        final order = Order(
          orderId: '',  // Will be generated by the database
          userId: userId,
          items: orderItems,
          orderDate: DateTime.now(),
          status: 'PENDING',
          taxAmount: state.tax,
          shippingAmount: state.shipping,
          discountAmount: 0.0,  // Default to 0
          totalAmount: state.total,
        );

        // Submit order to repository
        final orderId = await _orderRepository.createOrder(order);

        if (orderId != null) {
          state = state.copyWith(
            orderId: orderId,
            currentStep: CheckoutStep.confirmation,
          );
          endLoading();
          return true;
        } else {
          handleError('creating order', 'Failed to create order');
          return false;
        }
      }
    } catch (e) {
      handleError('placing order', e);
      return false;
    }
  }

  // Reset method
  void reset() {
    state = CheckoutState.initial();
  }

  // ConvertGuestOrderToUserOrder method
  Future<bool> convertGuestOrderToUserOrder(String guestOrderId, String userId) async {
    startLoading();

    try {
      // Get guest order details
      final guestOrder = await _guestOrderService.getGuestOrder(guestOrderId);

      if (guestOrder == null) {
        handleError('converting guest order', 'Guest order not found');
        return false;
      }

      // Create cart items from the guest order items
      final items = (guestOrder['items'] as List).map((item) => CartItem(
        id: item['item_id'] ?? item['id'] ?? DateTime.now().millisecondsSinceEpoch.toString(),
        productId: item['product_id'],
        name: item['name'],
        price: item['price'].toDouble(),
        quantity: item['quantity'],
        imageUrl: item['image_url'],
      )).toList();

      // Create address from the guest order shipping address
      final shippingAddress = Address.fromJson(guestOrder['shipping_address']);

      // Create the order in the database
      final result = await _orderRepository.createOrderFromCheckout(
        userId: userId,
        products: items,
        shippingAddress: shippingAddress,
        subtotal: guestOrder['total_amount'] - guestOrder['tax_amount'] - guestOrder['shipping_amount'],
        tax: guestOrder['tax_amount'],
        shipping: guestOrder['shipping_amount'],
        total: guestOrder['total_amount'],
        paymentMethod: guestOrder['payment_method'],
        paymentIntentId: guestOrder['payment_intent_id'] ?? '',
        isGuestCheckout: false,
      );

      if (result['success']) {
        // Mark the guest order as converted
        await _guestOrderService.convertGuestOrderToUserOrder(guestOrderId, userId);

        state = state.copyWith(
          clearError: true,
        );
        endLoading();
        return true;
      } else {
        handleError('converting guest order', result['message'] ?? 'Failed to convert guest order');
        return false;
      }
    } catch (e) {
      handleError('converting guest order', e);
      return false;
    }
  }
}
